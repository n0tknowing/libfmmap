.\" Copyright (c) 2022, Nathanael Eka Oktavian <nathekavian@gmail.com>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright notice, this
.\"    list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright notice,
.\"    this list of conditions and the following disclaimer in the documentation
.\"    and/or other materials provided with the distribution.
.\"
.\" 3. Neither the name of the copyright holder nor the names of its
.\"    contributors may be used to endorse or promote products derived from
.\"    this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
.\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
.\" CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\" OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.TH LIBFMMAP 3 "14 June 2022" "libfmmap-git" "libfmmap Manual"
.SH NAME
libfmmap \- helper library for memory-mapped file
.SH SYNOPSIS
.nf
.B #include <fmmap.h>

fmmap *fmmap_open_length(const char *fname, int mode, size_t len);
fmmap *fmmap_open(const char *fname, int mode);
fmmap *fmmap_create(const char *fname, int mode, int perms);
int fmmap_close(fmmap *fm);

size_t fmmap_read(fmmap *restrict fm, void *restrict buf, size_t len);
size_t fmmap_write(fmmap *restrict fm, const void *restrict buf, size_t len);

off_t fmmap_seek(fmmap *fm, off_t offset, int whence);
size_t fmmap_tell(fmmap *fm);
size_t fmmap_length(fmmap *fm);
void fmmap_rewind(fmmap *fm);

bool fmmap_iseof(fmmap *fm);
.fi
.SH DESCRIPTION
\fIPLEASE NOTE THAT LIBFMMAP ONLY WORKS ON REGULAR FILE AND LINUX\fP.

This library provides an easy to use interfaces to work with memory-mapped
file.  The interfaces are pretty simple if you know to use functions from
\fI<stdio.h>\fP and \fI<unistd.h>\fP.

It also handles problems like writing to memory and synchronizing with the file
when done, file size and virtual address space are resize automatically.

.TP
\fBfmmap *fmmap_open_length(const char *fname, int mode, size_t length);\fP
Open \fIfname\fP with \fIlength\fP and set its file \fImode\fP.  Valid mode is
one of \fIFMMAP_RDONLY\fP or \fIFMMAP_WRONLY\fP or \fIFMMAP_RDWR\fP.
Additional mode for writing is available and it's one of
\fIFMMAP_TRUNC\fP or \fIFMMAP_APPEND\fP.  You can't set these mode at the same
time and if you set it, only \fIFMMAP_APPEND\fP will be used.

.TP
\fBfmmap *fmmap_open(const char *fname, int mode);\fP
Open \fIfname\fP with mode \fImode\fP.  This function is identical to
.BR fmmap_open_length ()
except that the file length is automatically determined, but if you try
to use this function on pseudo filesystem like
.BR proc (5)
then please use
.BR fmmap_open_length ()
instead and provide the file length manually by yourself, the reason is because
file inside procfs is always change and returns 0.

.TP
\fBfmmap *fmmap_create(const char *fname, int mode, int perms);\fP
Both
.BR fmmap_open_length ()
and
.BR fmmap_open ()
can't be used if file doesn't exist, so to solve this problem you can create
a new file with file name \fIfname\fP, set the file \fImode\fP, and set what
file permission should be with \fIperms\fP.

Currently supported \fImode\fP is \fIFMMAP_EXCL\fP, this mode tells the function
to returns an error instead if \fIfname\fP is already exists.  If this is not
what you want, you can set to 0.  Any \fImode\fP from
.BR fmmap_open ()
can't be used here, and it will be ignored.

And \fIperms\fP must be an octal value like \fI0600\fP.

.TP
\fBint fmmap_close(fmmap *fm);\fP
Close any valid opened memory-mapped file from \fIfm\fP.  When this function is
called, all data that written to memory is automatically synchronize with the
underlying file.

.TP
\fBsize_t fmmap_read(fmmap *restrict fm, void *restrict buf, size_t length);\fP
Read data from \fIfm\fP and store it to \fIbuf\fP with \fIlength\fP bytes.

.TP
\fBsize_t fmmap_write(fmmap *restrict fm, const void *restrict buf, size_t length);\fP
Write data from \fIbuf\fP to \fIfm\fP with \fIlength\fP bytes.

.TP
\fBoff_t fmmap_seek(fmmap *fm, off_t offset, int whence);\fP
This function is identical to
.BR lseek (2)
except that if \fIoffset\fP is beyond the file size, it returns an error.

.TP
\fBsize_t fmmap_tell(fmmap *fm);\fP
Get the current offset.

.TP
\fBsize_t fmmap_length(fmmap *fm);\fP
Get the file length.

.TP
\fBvoid fmmap_rewind(fmmap *fm);\fP
Set the current offset to the beginning of file.  It is equivalent to:
.RS
(void) fmmap_seek(fm, 0, FMMAP_SEEK_SET);
.RE

.TP
\fBbool fmmap_iseof(fmmap *fm);\fP
Check if we're at end of file.
.SH RETURN VALUE
.BR fmmap_open_length (),
.BR fmmap_open (),
and
.BR fmmap_create ()
return a \fIfmmap\fP pointer on success or \fBNULL\fP on error.

.BR fmmap_close ()
returns 0 on success or -1 on error.

.BR fmmap_read ()
and
.BR fmmap_write ()
return the number of \fIlen\fP bytes on success or 0 on error.

.BR fmmap_seek ()
returns the number of \fIoffset\fP bytes on success or \fI(off_t) -1\fP on
error.

.BR fmmap_tell ()
and
.BR fmmap_length ()
return the current offset and the file length respectively on success or 0 on
error.

.BR fmmap_iseof ()
returns \fBtrue\fP on success or \fBfalse\fP on error.
.SH ERRORS
Almost all functions except
.BR fmmap_rewind ()
and
.BR fmmap_iseof ()
is set an errno, you can use
.BR perror (3)
or
.BR strerror (3)
for converting this errno to human-readable error message from the
standard library.  Usually, this errno is set from underlying function
that \fIlibfmmap\fP uses like
.BR mmap (2).
.SH BUGS
Please report it to https://github.com/n0tknowing/libfmmap/issues
.SH AUTHORS
Nathanael Eka Oktavian <nathekavian@gmail.com>
.SH SEE ALSO
.BR mmap (2),
.BR munmap (2),
.BR mremap (2),
.BR msync (2),
.BR mprotect (2),
.BR mlock (2),
.BR open (2),
.BR close (2),
.BR read (2),
.BR write (2),
.BR ftruncate (2),
.BR lseek (2),
.BR fopen (3),
.BR fclose (3),
.BR fread (3),
.BR fwrite (3)
